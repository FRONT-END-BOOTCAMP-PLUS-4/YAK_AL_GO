"use client"

import type React from "react"

import { useState } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"

type ReviewOption = {
  emoji: string
  text: string
  category: string
}

const medicineReviewOptions: Record<string, ReviewOption[]> = {
  Ìö®Í≥º: [
    { emoji: "üíä", text: "Ìö®Í≥ºÍ∞Ä Îπ®ÎùºÏöî", category: "Ìö®Í≥º" },
    { emoji: "‚ú®", text: "Ìö®Í≥ºÍ∞Ä ÌôïÏã§Ìï¥Ïöî", category: "Ìö®Í≥º" },
    { emoji: "üéØ", text: "Ï¶ùÏÉÅÏù¥ ÎßéÏù¥ Í∞úÏÑ†ÎêêÏñ¥Ïöî", category: "Ìö®Í≥º" },
    { emoji: "üëç", text: "Í∏∞ÎåÄÌñàÎçò Ìö®Í≥ºÍ∞Ä ÏûàÏñ¥Ïöî", category: "Ìö®Í≥º" },
  ],
  "Î≥µÏö© Ìé∏ÏùòÏÑ±": [
    { emoji: "üòã", text: "ÎßõÏù¥ Í¥úÏ∞ÆÏïÑÏöî", category: "Î≥µÏö© Ìé∏ÏùòÏÑ±" },
    { emoji: "üíß", text: "ÏÇºÌÇ§Í∏∞ Ïâ¨ÏõåÏöî", category: "Î≥µÏö© Ìé∏ÏùòÏÑ±" },
    { emoji: "üìè", text: "ÌÅ¨Í∏∞Í∞Ä Ï†ÅÎãπÌï¥Ïöî", category: "Î≥µÏö© Ìé∏ÏùòÏÑ±" },
    { emoji: "‚è∞", text: "Î≥µÏö©Î≤ïÏù¥ Í∞ÑÎã®Ìï¥Ïöî", category: "Î≥µÏö© Ìé∏ÏùòÏÑ±" },
    { emoji: "üì¶", text: "Ìè¨Ïû•Ïù¥ Ìé∏Î¶¨Ìï¥Ïöî", category: "Î≥µÏö© Ìé∏ÏùòÏÑ±" },
  ],
  Î∂ÄÏûëÏö©: [
    { emoji: "üòä", text: "Î∂ÄÏûëÏö©Ïù¥ ÏóÜÏñ¥Ïöî", category: "Î∂ÄÏûëÏö©" },
    { emoji: "üå±", text: "ÏàúÌïòÍ≥† ÏûêÍ∑πÏù¥ Ï†ÅÏñ¥Ïöî", category: "Î∂ÄÏûëÏö©" },
    { emoji: "üò¥", text: "Ï°∏ÏùåÏù¥ Ïò§ÏßÄ ÏïäÏïÑÏöî", category: "Î∂ÄÏûëÏö©" },
    { emoji: "ü§¢", text: "ÏÜçÏù¥ Î∂àÌé∏ÌïòÏßÄ ÏïäÏïÑÏöî", category: "Î∂ÄÏûëÏö©" },
  ],
  "Í∞ÄÍ≤©/Ï†ëÍ∑ºÏÑ±": [
    { emoji: "üí∞", text: "Í∞ÄÍ≤©Ïù¥ Ìï©Î¶¨Ï†ÅÏù¥ÏóêÏöî", category: "Í∞ÄÍ≤©/Ï†ëÍ∑ºÏÑ±" },
    { emoji: "üè™", text: "Íµ¨ÌïòÍ∏∞ Ïâ¨ÏõåÏöî", category: "Í∞ÄÍ≤©/Ï†ëÍ∑ºÏÑ±" },
    { emoji: "üìã", text: "Ï≤òÎ∞©Î∞õÍ∏∞ Ìé∏Ìï¥Ïöî", category: "Í∞ÄÍ≤©/Ï†ëÍ∑ºÏÑ±" },
  ],
  "Í∏∞ÌÉÄ ÎßåÏ°±ÎèÑ": [
    { emoji: "‚ù§Ô∏è", text: "Ï†ÑÎ∞òÏ†ÅÏúºÎ°ú ÎßåÏ°±Ìï¥Ïöî", category: "Í∏∞ÌÉÄ ÎßåÏ°±ÎèÑ" },
    { emoji: "üîÑ", text: "Ïû¨Íµ¨Îß§ ÏùòÌñ•Ïù¥ ÏûàÏñ¥Ïöî", category: "Í∏∞ÌÉÄ ÎßåÏ°±ÎèÑ" },
    { emoji: "üë®‚Äç‚öïÔ∏è", text: "ÏùòÏÇ¨Í∞Ä Ï∂îÏ≤úÌñàÏñ¥Ïöî", category: "Í∏∞ÌÉÄ ÎßåÏ°±ÎèÑ" },
    { emoji: "üìà", text: "Íæ∏Ï§ÄÌûà Î≥µÏö©ÌïòÍ≥† ÏûàÏñ¥Ïöî", category: "Í∏∞ÌÉÄ ÎßåÏ°±ÎèÑ" },
  ],
  "Î∂ÄÏ†ïÏ†Å Î¶¨Î∑∞": [
    { emoji: "üòµ", text: "Î∂ÄÏûëÏö©Ïù¥ ÏûàÏñ¥Ïöî", category: "Î∂ÄÏ†ïÏ†Å Î¶¨Î∑∞" },
    { emoji: "‚è≥", text: "Ìö®Í≥ºÍ∞Ä Îä¶Ïñ¥Ïöî", category: "Î∂ÄÏ†ïÏ†Å Î¶¨Î∑∞" },
    { emoji: "üí∏", text: "Í∞ÄÍ≤©Ïù¥ ÎπÑÏã∏Ïöî", category: "Î∂ÄÏ†ïÏ†Å Î¶¨Î∑∞" },
    { emoji: "üò∑", text: "ÎßõÏù¥ Ïì∞Í±∞ÎÇò ÎÉÑÏÉàÍ∞Ä ÎÇòÏöî", category: "Î∂ÄÏ†ïÏ†Å Î¶¨Î∑∞" },
  ],
}

interface MedicineReviewDialogProps {
  children: React.ReactNode
  onSubmit?: (selectedOptions: string[], comment: string) => void
}

export function MedicineReviewDialog({ children, onSubmit }: MedicineReviewDialogProps) {
  const [selectedOptions, setSelectedOptions] = useState<string[]>([])
  const [comment, setComment] = useState("")
  const [open, setOpen] = useState(false)

  const handleOptionToggle = (option: string) => {
    if (selectedOptions.includes(option)) {
      setSelectedOptions(selectedOptions.filter((item) => item !== option))
    } else {
      setSelectedOptions([...selectedOptions, option])
    }
  }

  const handleSubmit = () => {
    if (onSubmit) {
      onSubmit(selectedOptions, comment)
    }
    setOpen(false)
    setSelectedOptions([])
    setComment("")
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>ÏïΩÌíà Î¶¨Î∑∞ ÏûëÏÑ±</DialogTitle>
        </DialogHeader>
        <div className="py-4 space-y-6">
          {Object.entries(medicineReviewOptions).map(([categoryName, options]) => (
            <div key={categoryName} className="space-y-4">
              <h3 className="font-medium text-base">{categoryName}</h3>
              <div className="grid grid-cols-2 gap-2">
                {options.map((option) => (
                  <button
                    key={option.text}
                    className={`flex items-center gap-2 p-3 rounded-md border text-left transition-colors ${
                      selectedOptions.includes(option.text) 
                        ? "border-primary bg-primary/10 text-primary" 
                        : "border-border hover:border-primary/50"
                    }`}
                    onClick={() => handleOptionToggle(option.text)}
                  >
                    <span className="text-lg">{option.emoji}</span>
                    <span className="text-sm">{option.text}</span>
                  </button>
                ))}
              </div>
            </div>
          ))}

        </div>
        <DialogFooter>
          <Button onClick={handleSubmit} disabled={selectedOptions.length === 0}>
            Î¶¨Î∑∞ Îì±Î°ù
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
